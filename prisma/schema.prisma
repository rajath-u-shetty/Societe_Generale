// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod" 
  relationModel         = true 
  modelCase             = "camelCase" 
  modelSuffix           = "Schema" 
  useDecimalJs          = true 
  prismaJsonNullability = true 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             String    @id @default(cuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  users          UserProject[]
  sops           SOP[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  userProjects  UserProject[]
  sops          SOP[]     @relation("CreatedSOPs")
}

model UserProject {
  id        String  @id @default(cuid())
  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model SOP {
  id           String   @id @default(cuid())
  title        String
  content      String
  aiContent    String?
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdById  String
  createdBy    User     @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "CreatedSOPs")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
